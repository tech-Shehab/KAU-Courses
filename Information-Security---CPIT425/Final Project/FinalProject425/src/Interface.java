import java.io.*;
import java.security.MessageDigest;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.*;

public class Interface extends javax.swing.JFrame {

    /**
     * Creates new form Interface
     */
    public Interface() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label2 = new java.awt.Label();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        label1 = new java.awt.Label();
        firstHashCalc = new javax.swing.JButton();
        secondHashCalc = new javax.swing.JButton();
        compare = new javax.swing.JButton();
        firstFileName = new javax.swing.JTextField();
        secondFileName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MA Using MD5 (CPIT-426 Final Project) By Shehab & Sattam");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        label2.setFont(new java.awt.Font("Dialog", 0, 48)); // NOI18N
        label2.setText("Massage Authentication Using MD5");

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Logo-removebg-preview.png"))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Enter the first file name with the extension");

        label1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        label1.setText("Enter the second file name with the extension");

        firstHashCalc.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        firstHashCalc.setText("Calculate Hash");
        firstHashCalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstHashCalcActionPerformed(evt);
            }
        });

        secondHashCalc.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        secondHashCalc.setText("Calculate Hash");
        secondHashCalc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                secondHashCalcActionPerformed(evt);
            }
        });

        compare.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        compare.setText("Compare Files");
        compare.setActionCommand("compare");
        compare.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compareActionPerformed(evt);
            }
        });

        firstFileName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        firstFileName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstFileNameActionPerformed(evt);
            }
        });

        secondFileName.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(339, 339, 339)
                        .addComponent(firstHashCalc))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(344, 344, 344)
                        .addComponent(secondHashCalc))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(348, 348, 348)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(319, 319, 319)
                        .addComponent(compare, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(firstFileName, javax.swing.GroupLayout.DEFAULT_SIZE, 785, Short.MAX_VALUE)
                                .addComponent(secondFileName)))))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(firstFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(firstHashCalc)
                .addGap(94, 94, 94)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(secondFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(secondHashCalc)
                .addGap(18, 18, 18)
                .addComponent(compare, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        label2.getAccessibleContext().setAccessibleName("Intrusion Detection");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void firstHashCalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstHashCalcActionPerformed
        String fileName = firstFileName.getText();
        
        try {
            JOptionPane.showMessageDialog(null, hashValue(fileName));
        } catch (Exception ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_firstHashCalcActionPerformed

    private void secondHashCalcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_secondHashCalcActionPerformed
        String fileName = secondFileName.getText();
        
        try {
            JOptionPane.showMessageDialog(null, hashValue(fileName));
        } catch (Exception ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_secondHashCalcActionPerformed

    private void compareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compareActionPerformed
        try {
            if(compareHash())
                JOptionPane.showMessageDialog(null, "File is safe");
            else
                JOptionPane.showMessageDialog(null, "File has been modified!");
        } catch (Exception ex) {
            Logger.getLogger(Interface.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_compareActionPerformed

    private void firstFileNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstFileNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstFileNameActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Interface().setVisible(true);
            }
        });
        
        
    }
      

public static String getMD5Checksum(String filename) throws Exception {
        byte[] b = createChecksum(filename);
        String result = "";
        for (int i = 0; i<b.length;i++)
            result += Integer.toHexString(b[i] & 0xFF);

        return result;
    }
    
    public static byte[] createChecksum(String filename) throws Exception {
        InputStream fis = new FileInputStream(filename);
        byte[] buffer = new byte[(int) new File(filename).length()];
        MessageDigest complete = MessageDigest.getInstance("MD5"); // SHA-256
        int numRead = fis.read(buffer);
        if (numRead > 0)
            complete.update(buffer, 0, numRead);

        fis.close();
        return complete.digest();
    }

    
    private String readFileName(String fileName) {
        String fileNameWithoutExtension = "";
        for (int i = 0; i < fileName.length(); i++) {
            if (fileName.charAt(i) == '.') {
                return fileNameWithoutExtension;
            }
            fileNameWithoutExtension = fileNameWithoutExtension + fileName.charAt(i);
        }
        return fileNameWithoutExtension;
    }
    
    private boolean compareHash() throws FileNotFoundException, Exception {
        
        String firstHash = hashValue(firstFileName.getText());
        String secondHash = hashValue(secondFileName.getText());
        for (int i = 0; i < 31; i++) {
            if (firstHash.charAt(i) != secondHash.charAt(i))
                return false;
        }
        return true;
    }
    
    private String hashValue(String fileName) throws Exception {
        String hash = getMD5Checksum(fileName);
        PrintWriter out = new PrintWriter(readFileName(fileName) + "(hash).txt");
        out.println(hash);out.close();
        return hash;
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton compare;
    private javax.swing.JTextField firstFileName;
    private javax.swing.JButton firstHashCalc;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private java.awt.Label label1;
    private java.awt.Label label2;
    private javax.swing.JTextField secondFileName;
    private javax.swing.JButton secondHashCalc;
    // End of variables declaration//GEN-END:variables
}
